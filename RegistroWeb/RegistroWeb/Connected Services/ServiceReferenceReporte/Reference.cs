//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RegistroWeb.ServiceReferenceReporte {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceReporte.IReporteService")]
    public interface IReporteService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReporteService/IDServicio", ReplyAction="http://tempuri.org/IReporteService/IDServicioResponse")]
        string IDServicio();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IReporteService/IDServicio", ReplyAction="http://tempuri.org/IReporteService/IDServicioResponse")]
        System.IAsyncResult BeginIDServicio(System.AsyncCallback callback, object asyncState);
        
        string EndIDServicio(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReporteService/InsertReporte", ReplyAction="http://tempuri.org/IReporteService/InsertReporteResponse")]
        int InsertReporte(int IDServicio, string FechaReporte, int HoraTrabajo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IReporteService/InsertReporte", ReplyAction="http://tempuri.org/IReporteService/InsertReporteResponse")]
        System.IAsyncResult BeginInsertReporte(int IDServicio, string FechaReporte, int HoraTrabajo, System.AsyncCallback callback, object asyncState);
        
        int EndInsertReporte(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReporteService/Factura", ReplyAction="http://tempuri.org/IReporteService/FacturaResponse")]
        int Factura(int IDServicio);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IReporteService/Factura", ReplyAction="http://tempuri.org/IReporteService/FacturaResponse")]
        System.IAsyncResult BeginFactura(int IDServicio, System.AsyncCallback callback, object asyncState);
        
        int EndFactura(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReporteServiceChannel : RegistroWeb.ServiceReferenceReporte.IReporteService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IDServicioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IDServicioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertReporteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertReporteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FacturaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FacturaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReporteServiceClient : System.ServiceModel.ClientBase<RegistroWeb.ServiceReferenceReporte.IReporteService>, RegistroWeb.ServiceReferenceReporte.IReporteService {
        
        private BeginOperationDelegate onBeginIDServicioDelegate;
        
        private EndOperationDelegate onEndIDServicioDelegate;
        
        private System.Threading.SendOrPostCallback onIDServicioCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertReporteDelegate;
        
        private EndOperationDelegate onEndInsertReporteDelegate;
        
        private System.Threading.SendOrPostCallback onInsertReporteCompletedDelegate;
        
        private BeginOperationDelegate onBeginFacturaDelegate;
        
        private EndOperationDelegate onEndFacturaDelegate;
        
        private System.Threading.SendOrPostCallback onFacturaCompletedDelegate;
        
        public ReporteServiceClient() {
        }
        
        public ReporteServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReporteServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReporteServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReporteServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<IDServicioCompletedEventArgs> IDServicioCompleted;
        
        public event System.EventHandler<InsertReporteCompletedEventArgs> InsertReporteCompleted;
        
        public event System.EventHandler<FacturaCompletedEventArgs> FacturaCompleted;
        
        public string IDServicio() {
            return base.Channel.IDServicio();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIDServicio(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIDServicio(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndIDServicio(System.IAsyncResult result) {
            return base.Channel.EndIDServicio(result);
        }
        
        private System.IAsyncResult OnBeginIDServicio(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIDServicio(callback, asyncState);
        }
        
        private object[] OnEndIDServicio(System.IAsyncResult result) {
            string retVal = this.EndIDServicio(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIDServicioCompleted(object state) {
            if ((this.IDServicioCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IDServicioCompleted(this, new IDServicioCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IDServicioAsync() {
            this.IDServicioAsync(null);
        }
        
        public void IDServicioAsync(object userState) {
            if ((this.onBeginIDServicioDelegate == null)) {
                this.onBeginIDServicioDelegate = new BeginOperationDelegate(this.OnBeginIDServicio);
            }
            if ((this.onEndIDServicioDelegate == null)) {
                this.onEndIDServicioDelegate = new EndOperationDelegate(this.OnEndIDServicio);
            }
            if ((this.onIDServicioCompletedDelegate == null)) {
                this.onIDServicioCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIDServicioCompleted);
            }
            base.InvokeAsync(this.onBeginIDServicioDelegate, null, this.onEndIDServicioDelegate, this.onIDServicioCompletedDelegate, userState);
        }
        
        public int InsertReporte(int IDServicio, string FechaReporte, int HoraTrabajo) {
            return base.Channel.InsertReporte(IDServicio, FechaReporte, HoraTrabajo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertReporte(int IDServicio, string FechaReporte, int HoraTrabajo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertReporte(IDServicio, FechaReporte, HoraTrabajo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndInsertReporte(System.IAsyncResult result) {
            return base.Channel.EndInsertReporte(result);
        }
        
        private System.IAsyncResult OnBeginInsertReporte(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int IDServicio = ((int)(inValues[0]));
            string FechaReporte = ((string)(inValues[1]));
            int HoraTrabajo = ((int)(inValues[2]));
            return this.BeginInsertReporte(IDServicio, FechaReporte, HoraTrabajo, callback, asyncState);
        }
        
        private object[] OnEndInsertReporte(System.IAsyncResult result) {
            int retVal = this.EndInsertReporte(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertReporteCompleted(object state) {
            if ((this.InsertReporteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertReporteCompleted(this, new InsertReporteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertReporteAsync(int IDServicio, string FechaReporte, int HoraTrabajo) {
            this.InsertReporteAsync(IDServicio, FechaReporte, HoraTrabajo, null);
        }
        
        public void InsertReporteAsync(int IDServicio, string FechaReporte, int HoraTrabajo, object userState) {
            if ((this.onBeginInsertReporteDelegate == null)) {
                this.onBeginInsertReporteDelegate = new BeginOperationDelegate(this.OnBeginInsertReporte);
            }
            if ((this.onEndInsertReporteDelegate == null)) {
                this.onEndInsertReporteDelegate = new EndOperationDelegate(this.OnEndInsertReporte);
            }
            if ((this.onInsertReporteCompletedDelegate == null)) {
                this.onInsertReporteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertReporteCompleted);
            }
            base.InvokeAsync(this.onBeginInsertReporteDelegate, new object[] {
                        IDServicio,
                        FechaReporte,
                        HoraTrabajo}, this.onEndInsertReporteDelegate, this.onInsertReporteCompletedDelegate, userState);
        }
        
        public int Factura(int IDServicio) {
            return base.Channel.Factura(IDServicio);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFactura(int IDServicio, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFactura(IDServicio, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndFactura(System.IAsyncResult result) {
            return base.Channel.EndFactura(result);
        }
        
        private System.IAsyncResult OnBeginFactura(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int IDServicio = ((int)(inValues[0]));
            return this.BeginFactura(IDServicio, callback, asyncState);
        }
        
        private object[] OnEndFactura(System.IAsyncResult result) {
            int retVal = this.EndFactura(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFacturaCompleted(object state) {
            if ((this.FacturaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FacturaCompleted(this, new FacturaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FacturaAsync(int IDServicio) {
            this.FacturaAsync(IDServicio, null);
        }
        
        public void FacturaAsync(int IDServicio, object userState) {
            if ((this.onBeginFacturaDelegate == null)) {
                this.onBeginFacturaDelegate = new BeginOperationDelegate(this.OnBeginFactura);
            }
            if ((this.onEndFacturaDelegate == null)) {
                this.onEndFacturaDelegate = new EndOperationDelegate(this.OnEndFactura);
            }
            if ((this.onFacturaCompletedDelegate == null)) {
                this.onFacturaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFacturaCompleted);
            }
            base.InvokeAsync(this.onBeginFacturaDelegate, new object[] {
                        IDServicio}, this.onEndFacturaDelegate, this.onFacturaCompletedDelegate, userState);
        }
    }
}
